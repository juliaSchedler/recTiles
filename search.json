[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "recTiles",
    "section": "",
    "text": "Tiles\nThis is Julia’s transcription of what Alex has been showing her so far about his tile stuff."
  },
  {
    "objectID": "handdrawn.html#hand-drawn",
    "href": "handdrawn.html#hand-drawn",
    "title": "Julia’s First Tiles",
    "section": "Hand-drawn",
    "text": "Hand-drawn\n\nFirst Tile\n\n\n\nActually I did this one second, but this is the first matrix I chose. Alex suggested I change to the one visualized next.\n\n\n\\[\nM = \\begin{bmatrix}2 & 1\\\\ -1 & 1\\end{bmatrix}\n\\]\n\n\n\n\n\n\n\nSecond Tile\n\n\n\nThe second tiling, actually the very first that I drew (well, the first I drew correctly-- see my mistake?)\n\n\n\\[\nM = \\begin{bmatrix} 2 & 5\\\\ -1 & 3\\end{bmatrix}\n\\]\n\n\n\n\n\n\n\nThird Tile\n\n\n\nThe drawing for the third tiling. I did this one for fun by myself! I chose big numbers so I could have space to write out coordinates and work out some math for the purposes of coding it up.\n\n\n\\[\nM = \\begin{bmatrix} 8& 5\\\\ -4 & 3\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "handdrawn.html#computer-generated",
    "href": "handdrawn.html#computer-generated",
    "title": "Julia’s First Tiles",
    "section": "Computer-generated",
    "text": "Computer-generated\n\nFourth Tile\n\\[\nM = \\begin{bmatrix} 3 & 3\\\\ -3 & 3\\end{bmatrix}\n\\]\n\n\nCode\nlibrary(ggplot2)\n## original coordinates\nA &lt;- matrix(c(3, -3), ncol = 1)\nB &lt;- matrix(c(3, 3), ncol = 1)\n\n## coordinates for 4 copies/combos \ncopies &lt;- -10:10\ncoefs &lt;- expand.grid(copies, copies)\n\nx.coords &lt;- coefs$Var1*A[1] + coefs$Var2*B[1]\ny.coords &lt;- coefs$Var1*A[2] + coefs$Var2*B[2]\n\nplot.dat &lt;- data.frame(x = x.coords, y = y.coords)\np &lt;- ggplot(data = plot.dat, aes(x = x, y = y)) +\n    geom_point() + \n    ylim(c(-14, 7)) +\n    xlim(c(-7, 15)) + \n    geom_rect(xmin = -7, xmax = 15, ymin = -14, ymax = 7, \n                        fill = \"#FFFFFF00\", col = \"black\") + \n    theme_minimal()\n\n\n## could fix the grid to make these for printing!\n\n## create on-diag rectangles\np1 &lt;- p + geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"lightpink\", col = \"pink\") + \n    ylim(c(-10, 7)) +\n    xlim(c(-7, 15)) \n## create off-diag rectangles\np2 &lt;- p1 + geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + B[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - A[2], \n                            fill = \"lavender\", col = \"purple\")\np2 + geom_point(col = \"magenta\")\n\n\n\n\n\n\n\nFifth Tile\n\\[\nM =\n\\begin{bmatrix} 12& 6\\\\ -3 & 1\\end{bmatrix}\n\\]\n\n\nCode\nlibrary(ggplot2)\n## original coordinates\nA &lt;- matrix(c(12, -3), ncol = 1)\nB &lt;- matrix(c(6, 1), ncol = 1)\n\n## coordinates for 4 copies/combos\ncopies &lt;- -10:10\ncoefs &lt;- expand.grid(copies, copies)\n\nx.coords &lt;- coefs$Var1*A[1] + coefs$Var2*B[1]\ny.coords &lt;- coefs$Var1*A[2] + coefs$Var2*B[2]\n\nplot.dat &lt;- data.frame(x = x.coords, y = y.coords)\np &lt;- ggplot(data = plot.dat, aes(x = x, y = y)) +\n    geom_point() + \n    ylim(c(-14, 7)) +\n    xlim(c(-7, 15)) + \n    geom_rect(xmin = -7, xmax = 15, ymin = -14, ymax = 7, \n                        fill = \"#FFFFFF00\", col = \"black\") + \n    theme_minimal()\n\n\n## could fix the grid to make these for printing!\n\n## create on-diag rectangles\np1 &lt;- p + geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"lightpink\", col = \"darkred\") + \n    ylim(c(-10, 7)) +\n    xlim(c(-7, 15)) \n## create off-diag rectangles\np2 &lt;- p1 + geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + B[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - A[2], \n                            fill = \"#E0FFFF\", col = \"#A2FFFF\")\np2 + geom_point(col = \"magenta\")\n\n\n\n\n\n\n\nSixth tile\n\n\nCode\nlibrary(ggplot2)\n## original coordinates\nA &lt;- matrix(c(7, 5), ncol = 1)\nB &lt;- matrix(c(6, 2), ncol = 1)\n\n## coordinates for 4 copies/combos\ncopies &lt;- -15:15\ncoefs &lt;- expand.grid(copies, copies)\n\nx.coords &lt;- coefs$Var1*A[1] + coefs$Var2*B[1]\ny.coords &lt;- coefs$Var1*A[2] + coefs$Var2*B[2]\n\nplot.dat &lt;- data.frame(x = x.coords, y = y.coords)\np &lt;- ggplot(data = plot.dat, aes(x = x, y = y)) +\n    geom_point() + \n    ylim(c(-14, 7)) +\n    xlim(c(-7, 15)) + \n    # geom_rect(xmin = -7, xmax = 15, ymin = -14, ymax = 7, \n    #                   fill = \"#FFFFFF00\", col = \"black\") + \n    theme_void()\n\n\n## could fix the grid to make these for printing!\n\n## create on-diag rectangles\np1 &lt;- p +geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + B[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - A[2], \n                            fill = \"#008b8b\", alpha = .1) + \n                            geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + B[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - A[2], \n                            fill = \"#FFFFFF00\", col = \"grey\") +\n                            geom_rect(xmin = plot.dat$x[481], xmax = plot.dat$x[481] + B[1], \n                            ymin = plot.dat$y[481], ymax = plot.dat$y[481] - A[2], \n                            fill = \"#FFFFFF00\", col = \"blue\") +\n                            geom_point(col = \"magenta\") + \n                            ylim(c(-14, 7)) +\n                            xlim(c(-7, 15))\n\n\n\n\nlibrary(patchwork)\np2 &lt;- p + geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"yellow\", alpha = .3) +\n                            geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"#FFFFFF00\", col = \"grey\") +\n                            geom_rect(xmin = plot.dat$x[481], xmax = plot.dat$x[481] + A[1], \n                            ymin = plot.dat$y[481], ymax = plot.dat$y[481] - B[2], \n                            fill = \"#FFFFFF00\", col = \"orange\")+\n                            geom_point(col = \"magenta\")+ \n                            ylim(c(-14, 7)) +\n                            xlim(c(-7, 15))\n\n## create off-diag rectangles\np_both &lt;- p1 +  geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"yellow\", alpha = .2) +\n                            ## outlines\n                            geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + B[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - A[2], \n                            fill = \"#FFFFFF00\", col = \"lightblue\", lwd = 2) +\n                            geom_rect(xmin = plot.dat$x, xmax = plot.dat$x + A[1], \n                            ymin = plot.dat$y, ymax = plot.dat$y - B[2], \n                            fill = \"#FFFFFF00\", col = \"lightyellow\") + \n                            geom_rect(xmin = plot.dat$x[481], xmax = plot.dat$x[481] + B[1], \n                            ymin = plot.dat$y[481], ymax = plot.dat$y[481] - A[2], \n                            fill = \"#FFFFFF00\", col = \"blue\", lwd = 2) +\n                            geom_rect(xmin = plot.dat$x[481], xmax = plot.dat$x[481] + A[1], \n                            ymin = plot.dat$y[481], ymax = plot.dat$y[481] - B[2], \n                            fill = \"#FFFFFF00\", col = \"yellow\") +\n                            geom_point(col = \"magenta\") + \n                            ylim(c(-14, 7)) +\n                            xlim(c(-7, 15))\n## add edges after\np1 + p2 + p_both"
  },
  {
    "objectID": "Construction.html#code-outline",
    "href": "Construction.html#code-outline",
    "title": "1  Construction",
    "section": "1.1 Code outline",
    "text": "1.1 Code outline\nInput:\n\nA \\((2+k) \\times (2 +k)\\) matrix \\(M\\)\n\nStep 1\n\ncalculate \\(k\\)\nCreate three new matrices:\n\n\\(M_{TOP}\\) is the \\(2 \\times (2+k)\\) matrix consisting of the first two rows of \\(M\\)\n\\(M_{BOT}\\) is the \\(k \\times (2+k)\\) matrix consisting of the remaining \\(k\\) rows of \\(M\\)\n\\(M'\\) is the \\((2+k) \\times (2 +k)\\) matrix created by stacking \\(M_{TOP}\\) and \\(-M_{BOT}\\)\n\n\nStep 2\n\nFor each \\(\\sigma \\in \\binom{[2+k]}{2}\\), define \\(S_{\\sigma}(M)\\) as follows:\n\n\n\n\n\n\nNotation: \\(\\binom{[n]}{k}\\)\n\n\n\n\n\nThe notation is shorthand for the set of all subsets of \\(\\{1, 2, \\dots, n\\}\\) of size \\(k\\).\nFor example, if \\(n = 3\\) and \\(k=2\\), \\[\\binom{[n]}{k} =  \\binom{[3]}{2} = FIXME\\]\n\n\n\n\nStart with \\(M'\\),\n\nConsider \\(i^{th}\\) column for \\(i \\in \\{1, 2, \\dots, k+2\\}\\). If :\n\n\\(i \\in \\sigma\\): zero out bottom \\(k\\) entries\n\\(i \\not\\in \\sigma\\): zero out the top 2 entries\n\n\n\n\n\n\n\nHere, \\(k = 3\\) and \\(\\sigma = \\{2, 5\\}\\).\n\n\n\nAfter this process, you will end up with \\(\\frac{1}{2}k^2 + \\frac{3}{2}k + 1\\) matrices\n\nStep 3\nConsider the matrices \\(\\{S_\\sigma\\}\\). Each of these matrices corresponds to a \\(2+k\\)-dimensional shape (the fundamental parallelepiped \\(\\Pi \\left ( S_\\sigma\\right )\\) defined by the columns of that matrix).\n\n\n\n\n\n\nThe fundamental parallelepiped \\(\\Pi(S_\\sigma)\\)\n\n\n\n\n\nNote that\n\\[\\Pi \\left ( S_\\sigma\\right ) = \\{S_\\sigma \\cdot (x_1, \\dots, x_{k+2})'\\}\\] Think of the \\(x_i\\) as representing the interval \\([0,1]\\), so that you are getting a shape. In other words, \\(\\Pi\\) is the Minkowski sum of the columns of \\(S_\\sigma\\).\n\n\n\nFor each \\(\\sigma\\), want to visualize a collection of parallelepipeds, \\(\\Pi \\left ( S_\\sigma\\right ) + Mz\\), where \\(z \\in \\mathbb{Z}^{k+2}\\). (FIXME: in practice we won’t want to generate individual plots because there will be too many, we just want to emphasize a given \\(S_\\sigma\\) in the plots discussed next.)\nThe desired end product is to create two visualizations: one of all positive \\(S_\\sigma\\) and one of all negative \\(S_\\sigma\\).\n\n\n\n\n\n\nWhat about \\(det(S_\\sigma) = 0\\)?\n\n\n\n\n\nThe determinant measures volume. So, in this case, the volume of the parallelepiped is 0, so there is nothing to visualize.\n\n\n\nAlso, that parallelepiped is more than 3D so there will need to be a choice made in which slices to take for visualization."
  }
]